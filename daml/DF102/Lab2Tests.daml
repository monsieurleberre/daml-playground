module DF102.Lab2Tests where 

import Daml.Script
import DF102.Lab2
import DA.Date
import DA.Time (time)
import DA.List




mkAliceApplication : Party -> Party -> Time -> CLPApplication
mkAliceApplication alice airline now = CLPApplication with
    customer = alice
    airline = airline
    id = "123"
    name = "Alice"
    address = "Wonderland"
    email = "alice@wonderland.io"
    phone = Some "123-456-7890"
    appTimestamp = now
    dob = toDateUTC now

mkBobApplication : Party -> Party -> Time -> CLPApplication
mkBobApplication bob airline now = CLPApplication with
    customer = bob
    airline = airline
    id = "456"
    name = "Bob"
    address = "Builder Street"
    email = "bob@builderstreet.io"
    phone = Some "987-654-3210"
    appTimestamp = now
    dob = toDateUTC now

testSubmitAndAcceptCLPApplication: Script () 
testSubmitAndAcceptCLPApplication = script do 
    alice <- allocateParty "Alice"
    airline <- allocateParty "Epic Airlines"
    
    setTime (time (date 2023 Mar 01) 10 30 0)
    now <- getTime 

    -- Alice creates a blank CLPApplication
    aliceCLPApplication1 <- submit alice do         
        createCmd (mkAliceApplication alice airline now)

    -- Alice submits the application with details filled in
    aliceCLPApplication1 <- submit alice do 
        exerciseCmd aliceCLPApplication1 SubmitApplication 

    -- Airline reviews application. This should result in a new CLPAccount for Alice
    aliceCLPAccount <- submit airline do 
        exerciseCmd aliceCLPApplication1 ReviewApplication 

    -- Alice creates another blank application
    aliceCLPApplication2 <- submit alice do         
        createCmd (mkAliceApplication alice airline now)

   -- Alice submits another application with details filled in with the same 'id'
    aliceCLPApplication2 <- submit alice do 
        exerciseCmd aliceCLPApplication2 SubmitApplication 

    -- Airline reviews it but no new account for Alice should be created
    aliceClpAccount2 <- submit airline do 
        exerciseCmd aliceCLPApplication2 ReviewApplication 

    ------ Problem 2 ------
    -- here comes Bob
    bob <- allocateParty "Bob"

    bobCLPAccountApplication <- submit bob do
        createCmd (mkBobApplication bob airline now)
        
    bobCLPAccountApplication <- submit bob do
        exerciseCmd bobCLPAccountApplication SubmitApplication

    bobCLPAccount <- submit airline do
        exerciseCmd bobCLPAccountApplication ReviewApplication

    allAccounts <- query @CLPAccount airline
    assertMsg "There should be exactly 2 CLP accounts" (length allAccounts == 2)

    -- Get the first contract ID from allAccounts
    let firstAccountCid = head [cid | (cid, _) <- allAccounts]
    -- Airline adds 100 points to the first account and 200 to the second
    _ <- submit airline do
        exerciseCmd firstAccountCid AddPoints with pointsToAdd = 100


    let lastAccount = last (map fst allAccounts)
    _ <- submit airline do
        exerciseCmd lastAccount AddPoints with pointsToAdd = 200

    return()